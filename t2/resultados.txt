Sistema operativo utilizado
Linux debian12 6.1.0-18-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.76-1 (2024-02-01) x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin-san
./compartir.bin-san
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1001: lanzando T3
 1001: T3 solicita acceder
 3001: lanzando T1
 3002: T1 solicita compartir p
 3003: T3 accede a p
 3003: T4 accede a p
 4002: lanzando T2
 4003: T2 solicita acceder
 4003: T2 accede a p
 5004: T4 devuelve
 6004: T2 devuelve
 7008: T3 devuelve
 7008: T1 termina de compartir p
 9014: T1 solicita compartir q
11007: T2 solicita acceder
11007: T2 accede a q
12016: T2 devuelve
12016: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 2 segundos
Se hicieron 1788 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
==== run-thr ====
gcc -g -DSAN=1 -fsanitize=thread -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin-thr
./compartir.bin-thr
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    2: T4 solicita acceder
 1002: lanzando T3
 1005: T3 solicita acceder
 3006: lanzando T1
 3009: T1 solicita compartir p
 3009: T4 accede a p
 3009: T3 accede a p
 4009: lanzando T2
 4012: T2 solicita acceder
 4012: T2 accede a p
 5010: T4 devuelve
 6013: T2 devuelve
 7010: T3 devuelve
 7010: T1 termina de compartir p
 9015: T1 solicita compartir q
11033: T2 solicita acceder
11033: T2 accede a q
12034: T2 devuelve
12035: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 14 segundos
Se hicieron 36 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
==== run-g ====
gcc -g -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin-g
./compartir.bin-g
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1001: lanzando T3
 1002: T3 solicita acceder
 3002: lanzando T1
 3002: T1 solicita compartir p
 3002: T4 accede a p
 3002: T3 accede a p
 4003: lanzando T2
 4003: T2 solicita acceder
 4003: T2 accede a p
 5011: T4 devuelve
 6004: T2 devuelve
 7003: T3 devuelve
 7003: T1 termina de compartir p
 9004: T1 solicita compartir q
11009: T2 solicita acceder
11009: T2 accede a q
12011: T2 devuelve
12011: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 1 segundos
Se hicieron 1433 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
==== run ====
gcc -O -DOPT=1 -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin
./compartir.bin
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    1: T4 solicita acceder
 1074: lanzando T3
 1074: T3 solicita acceder
 3075: lanzando T1
 3075: T1 solicita compartir p
 3076: T4 accede a p
 3076: T3 accede a p
 4082: lanzando T2
 4082: T2 solicita acceder
 4082: T2 accede a p
 5080: T4 devuelve
 6082: T2 devuelve
 7080: T3 devuelve
 7081: T1 termina de compartir p
 9082: T1 solicita compartir q
11102: T2 solicita acceder
11102: T2 accede a q
12103: T2 devuelve
12103: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 1 segundos
Se hicieron 30 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
